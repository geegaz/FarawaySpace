[gd_resource type="Shader" format=2]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.3.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,unshaded;

uniform vec4 albedo : hint_color = vec4(1.);
uniform float noise_scale = 12.;
uniform float noise_amount = 0.01;
uniform float noise_speed = 2.;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
	return fract(sin(dot(_uv.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation
    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
		(c - a)* u.y * (1.0 - u.x) +
		(d - b) * u.x * u.y;
}


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	//MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
}

void fragment() {
	float noise = noise(UV*noise_scale + vec2(0.,1.) * TIME * noise_speed) * noise_amount * clamp(1.-distance(UV, vec2(0.5))*2., 0., 1.);
	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(1.) * noise);

	ALBEDO = color.rgb * albedo.rgb;
//	ALBEDO = vec3(1.-distance(UV, vec2(0.5))*2.);
}
"
