[gd_scene load_steps=53 format=2]

[ext_resource path="res://addons/godot-polyliner/demos/default_env.tres" type="Environment" id=1]
[ext_resource path="res://addons/godot-polyliner/shaders/line_glow.gdshader" type="Shader" id=2]
[ext_resource path="res://addons/godot-polyliner/Line3D/LinePath3D.gd" type="Script" id=3]
[ext_resource path="res://addons/godot-polyliner/Trail3D/Trail3D.gd" type="Script" id=4]
[ext_resource path="res://addons/godot-polyliner/shaders/line_fade.gdshader" type="Shader" id=5]
[ext_resource path="res://addons/godot-polyliner/shaders/parallax/raymarch_rope.gdshader" type="Shader" id=6]
[ext_resource path="res://addons/godot-polyliner/Line3D/shaders/line_neon.shader" type="Shader" id=7]
[ext_resource path="res://addons/godot-polyliner/shaders/line_pbr.gdshader" type="Shader" id=8]
[ext_resource path="res://addons/godot-polyliner/shaders/parallax/raymarch_xmaslightbulbs.gdshader" type="Shader" id=9]

[sub_resource type="GDScript" id=1]
script/source = "tool
extends Spatial

export var mul = 1.0
export var xmul = 1.0

var timer = 0.0
var xtimer = 0.0
func _process(delta):
	timer += delta*mul
	xtimer += delta*xmul
#	rotation.x = sin(timer)*PI
	rotation.y = fmod(xtimer,TAU)
	translation.x = sin(timer)*0.4
#	rotation.y = sin(timer)*1.5+1.2
"

[sub_resource type="ShaderMaterial" id=31]
shader = ExtResource( 6 )
shader_param/line_width = 0.05
shader_param/color = Color( 0, 0.145098, 0.0117647, 1 )
shader_param/twirl_aspect = 0.5

[sub_resource type="SpatialMaterial" id=35]
metallic = 1.0
roughness = 0.31

[sub_resource type="SphereMesh" id=36]
material = SubResource( 35 )
radius = 0.5
height = 1.0

[sub_resource type="Curve3D" id=6]
bake_interval = 0.02
_data = {
"points": PoolVector3Array( -0.681473, 0.501452, 0.0499668, -0.0453298, -0.808289, -0.422336, -0.287503, 1.98422, 3.27149, -0.0263753, -0.319308, 0.277562, 0.211185, -0.271242, -0.129593, -0.702265, 1.97101, 1.42616, -0.404719, -0.395793, 0.304124, 0.250978, -0.285766, -0.20488, -0.185635, 1.97374, 0.449912, -0.389108, -0.272281, 0.110411, 0, 0, 0, 0.77868, 1.99284, -0.282347, -0.465314, 0.0219152, 0.559101, 0.465314, -0.0219152, -0.559101, 1.30247, 0.0139077, -0.142204, -0.690027, -0.0455682, 0.313123, 0.690027, 0.0455682, -0.313123, 2.53523, 0.0637698, -0.73445 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0, 0 )
}

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 8 )
shader_param/line_width = 0.031
shader_param/tangent_facing = false
shader_param/rounded = false
shader_param/uv_matches_width = true
shader_param/tex_stretch = true
shader_param/tex_scale = Vector2( 1, 1 )
shader_param/color = Color( 0.164706, 0.164706, 0.164706, 1 )
shader_param/metallic = 0.0
shader_param/specular = 0.5
shader_param/roughness = 0.5
shader_param/tube_normal = true

[sub_resource type="Curve3D" id=8]
bake_interval = 0.22
_data = {
"points": PoolVector3Array( 0.185279, -0.620741, -0.265847, -0.185279, 0.620741, 0.265847, 0.164175, 0.564023, -0.446867, 0.176258, 0.985339, -0.464011, -0.176258, -0.985339, 0.464011, -0.435987, 0.312722, 1.09197 ),
"tilts": PoolRealArray( 0, 0 )
}

[sub_resource type="Curve" id=49]
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), -6.86684, -2.3, 0, 0 ]

[sub_resource type="CurveTexture" id=50]
curve = SubResource( 49 )

[sub_resource type="ShaderMaterial" id=9]
shader = ExtResource( 5 )
shader_param/line_width = 0.177
shader_param/tangent_facing = false
shader_param/tangent_offset = 0.0
shader_param/color = Color( 1, 0, 0, 1 )
shader_param/alpha_curve = 0.5
shader_param/width_curve = SubResource( 50 )

[sub_resource type="Curve3D" id=10]
bake_interval = 0.1
_data = {
"points": PoolVector3Array( -1.56633, 1.435, 1.11107, 1.56633, -1.435, -1.11107, -1.4476, 1.03261, 3.57529, -1.27593, 0.641668, -1.2957, 1.27593, -0.641668, 1.2957, 2.35938, 1.03827, 3.9368 ),
"tilts": PoolRealArray( 0, 0 )
}

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 6 )
shader_param/line_width = 0.05
shader_param/color = Color( 1, 1, 0.5, 1 )
shader_param/twirl_aspect = 1.507

[sub_resource type="Curve3D" id=32]
bake_interval = 0.1
_data = {
"points": PoolVector3Array( 0, 0, 0, 0, 0, 0, -0.19442, 0.0866818, -1.76063, 2.33724, -1.66999, -3.70093, -2.33724, 1.66999, 3.70093, -0.721755, 2.50279, -5.27716, 1.3031, -0.628219, -3.35566, -1.3031, 0.628219, 3.35566, -0.0607967, 0.469147, 0.81765, -0.0909576, -0.0492868, 2.82991, 0.0909576, 0.0492868, -2.82991, -2.38183, 4.45401, -0.710008, 0.0524731, 1.97994, -1.77644, -0.0524731, -1.97994, 1.77644, -0.469312, 2.28247, -3.2984, 0.282413, -0.803169, -1.42656, -0.282413, 0.803169, 1.42656, -2.89779, 1.16475, 3.16977, -3.40217, 2.63917, 1.69681, 3.40217, -2.63917, -1.69681, 0.509509, 4.02975, 2.02187 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0, 0, 0 )
}

[sub_resource type="Curve" id=47]
_data = [ Vector2( 0, 1 ), 0.519532, 0.0, 0, 0, Vector2( 1, 0 ), -3.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=48]
curve = SubResource( 47 )

[sub_resource type="ShaderMaterial" id=33]
shader = ExtResource( 2 )
shader_param/line_width = 0.0
shader_param/glow_width = 0.4
shader_param/tangent_facing = false
shader_param/rounded = true
shader_param/color = Color( 0, 0.396078, 0.956863, 1 )
shader_param/curve = 0.2
shader_param/width_curve = SubResource( 48 )

[sub_resource type="Curve3D" id=12]
bake_interval = 0.09
_data = {
"points": PoolVector3Array( 0, 0, 0, 0, 0, 0, 0.0133251, 0.052581, -0.315982, -0.000402212, -0.0114647, 0.125075, 0.000402212, 0.0114647, -0.125075, -0.0649302, 0.0867756, -0.676741, 0.0406693, -0.314836, 0.00211489, -0.0406693, 0.314836, -0.00211489, -0.0292743, 0.402122, -0.924479, 0, 0, 0, 0, 0, 0, 0.253769, 1.67101, -0.867928 ),
"tilts": PoolRealArray( 0, 0, 0, 0 )
}

[sub_resource type="ShaderMaterial" id=13]
shader = ExtResource( 7 )
shader_param/line_width = 0.05
shader_param/edge_pos = 0.871
shader_param/edge_softness = 0.074
shader_param/edge_diminish = 0.229

[sub_resource type="Curve3D" id=14]
bake_interval = 0.23
_data = {
"points": PoolVector3Array( 0.0188306, 0.573898, -0.946725, 0, 0, 0, -0.0320193, 0.0871031, -0.953465, 0, 0, 0, 0, 0, 0, 0.252816, 1.61824, -0.898806 ),
"tilts": PoolRealArray( 0, 0 )
}

[sub_resource type="Curve3D" id=15]
bake_interval = 0.1
_data = {
"points": PoolVector3Array( 0, 0, 0, 0, 0, 0, -0.0320193, 0.0871031, -0.953465, 0.0287427, 0.147746, -0.154159, -0.0287427, -0.147746, 0.154159, 0.253769, 1.67101, -0.867928, 0.149462, 0.490598, -0.0296789, -0.149462, -0.490598, 0.0296789, 0.0705009, 0.543522, -0.505148, -0.0499868, -0.522727, -0.0048691, 0.0499868, 0.522727, 0.0048691, -0.00451469, 0.498086, -0.147836, 0, 0, 0, 0, 0, 0, 0.265312, 1.69012, -0.114367 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0 )
}

[sub_resource type="Curve3D" id=16]
bake_interval = 0.02
_data = {
"points": PoolVector3Array( 0.0176462, -0.073627, -0.07069, -0.0176462, 0.073627, 0.07069, 0.253769, 1.67101, -0.867928, -0.01461, 0.0929933, -0.0135185, 0.01461, -0.0929933, 0.0135185, 0.286338, 1.59172, -0.0273314, -0.0135941, 0.0593202, 0.0485303, 0.0135941, -0.0593202, -0.0485303, 0.116213, 1.51794, -0.782843, -0.00480502, 0.0413738, -0.0287494, 0.00480502, -0.0413738, 0.0287494, 0.112959, 1.13225, -0.854356, -0.00272521, 0.0478554, 0.00204782, 0.00272521, -0.0478554, -0.00204782, 0.188027, 1.12903, -0.189822, 0.0268822, 0.171594, 0.00298178, -0.0268822, -0.171594, -0.00298178, 0.0865254, 0.881009, -0.823246, -0.0100646, 0.208581, 0.0197082, 0.0100646, -0.208581, -0.0197082, -0.0294416, 0.317601, -0.856148, -0.0878368, 0.129924, -0.0854087, 0.0878368, -0.129924, 0.0854087, 0.0404086, -0.00266546, -0.0718503, 0.00638366, -0.00244647, 0.136213, -0.00638366, 0.00244647, -0.136213, -0.00573421, 0.0114359, -0.767331, -0.00999196, -0.141455, -0.012406, 0.00999196, 0.141455, 0.012406, -0.00607419, 0.194976, -0.960631, 0.0176462, -0.073627, -0.07069, -0.0176462, 0.073627, 0.07069, 0.253769, 1.67101, -0.867928 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
}

[sub_resource type="Curve3D" id=17]
bake_interval = 0.04
_data = {
"points": PoolVector3Array( 0, 0, 0, 0, 0, 0, -0.0121326, 1.08994, -0.0818059, 0.000700951, 0.173404, 0.00882459, -0.000700951, -0.173404, -0.00882459, 0.0211658, 0.821217, 0.311295, -0.00398445, 0.0413077, -0.00030303, 0.00398445, -0.0413077, 0.00030303, 0.00453615, 0.568758, -0.118173, 0.0099864, 0.132196, -0.00262773, -0.0099864, -0.132196, 0.00262773, -0.00528383, 0.285946, 0.27282, 0, 0, 0, 0, 0, 0, -0.00420463, -0.0685405, -0.0932269 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0 )
}

[sub_resource type="Curve3D" id=18]
bake_interval = 0.02
_data = {
"points": PoolVector3Array( -0.00588179, -0.0163611, 0.166676, 0.00588179, 0.0163611, -0.166676, 0.111722, 0.0532196, -0.272097, -0.052846, -0.227517, -0.0213231, 0.052846, 0.227517, 0.0213231, 0.143549, 0.39558, -0.336998, -0.0788579, -0.33897, -0.0257099, 0.0788579, 0.33897, 0.0257099, 0.245285, 1.13839, -0.24489, -0.031877, 0.583704, -0.00689557, 0.031877, -0.583704, 0.00689557, 0.127718, 0.625811, 0.533192, -0.00588179, -0.0163611, 0.166676, 0.00588179, 0.0163611, -0.166676, 0.111722, 0.0532196, -0.272097 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0 )
}

[sub_resource type="PlaneMesh" id=19]
size = Vector2( 10, 10 )

[sub_resource type="OpenSimplexNoise" id=20]
octaves = 5
period = 32.0

[sub_resource type="NoiseTexture" id=21]
seamless = true
as_normalmap = true
noise = SubResource( 20 )

[sub_resource type="SpatialMaterial" id=22]
albedo_color = Color( 0.25098, 0.25098, 0.25098, 1 )
roughness = 0.69
normal_enabled = true
normal_scale = 0.3
normal_texture = SubResource( 21 )
uv1_scale = Vector3( 3, 3, 1 )

[sub_resource type="Shader" id=23]
code = "shader_type spatial;
render_mode blend_mix;
render_mode cull_disabled;

varying float lifetime;
varying float alpf;
void vertex(){
	lifetime = INSTANCE_CUSTOM.y*0.01;
	alpf = sin(INSTANCE_CUSTOM.y*3.1415)*0.05;
}
uniform sampler2D noise_tex;
void fragment(){
	TRANSMISSION = vec3(1.0);
	ALBEDO = texture(noise_tex,UV+lifetime).rgb;
	ALPHA = alpf;
}"

[sub_resource type="OpenSimplexNoise" id=24]
octaves = 5

[sub_resource type="NoiseTexture" id=25]
seamless = true
noise = SubResource( 24 )

[sub_resource type="ShaderMaterial" id=26]
shader = SubResource( 23 )
shader_param/noise_tex = SubResource( 25 )

[sub_resource type="QuadMesh" id=27]
material = SubResource( 26 )
size = Vector2( 12, 4 )

[sub_resource type="QuadMesh" id=28]

[sub_resource type="Shader" id=29]
code = "shader_type spatial;
render_mode cull_disabled;
render_mode unshaded;


mat3 facevec(vec3 vector){
	vec3 c = normalize(vector);
	vec3 a = normalize(cross(c,vec3(0.0,1.0,0.0)));
	vec3 b = normalize(cross(c,a));
	return mat3(a,b,c);
}
varying float debug;
void vertex(){
	vec3 to_cam = (CAMERA_MATRIX[3].xyz-WORLD_MATRIX[3].xyz);
	vec3 to_axis = to_cam*mat3(WORLD_MATRIX);
	to_axis.y = 0.0;
	debug = abs(dot(normalize(to_cam),normalize(to_axis)));
	
	vec3 vert_to_view = (facevec(to_cam)*VERTEX);
	vert_to_view = inverse(mat3(WORLD_MATRIX))*vert_to_view;
	
	vec3 vert_to_axis = facevec(to_axis)*VERTEX;
	
	VERTEX = mix(vert_to_view,vert_to_axis,debug);
}
void fragment(){
//	if (!FRONT_FACING) { NORMAL *= -1.0; }
	ROUGHNESS = 0.1;
	ALBEDO = vec3( debug*0.2 );
}"

[sub_resource type="ShaderMaterial" id=30]
shader = SubResource( 29 )

[sub_resource type="ShaderMaterial" id=39]
shader = ExtResource( 5 )
shader_param/line_width = 0.4
shader_param/tangent_facing = true
shader_param/tangent_offset = 0.5
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/alpha_curve = 0.5

[sub_resource type="Shader" id=40]
code = "shader_type spatial;
render_mode skip_vertex_transform, cull_disabled;
render_mode depth_draw_alpha_prepass;

uniform float line_width = 0.1;
uniform bool tangent_facing = false;
uniform bool rounded = false;
float line_process(float width, inout vec3 vertex, vec3 dir_to_cam, vec2 uv,
					inout vec3 normal, inout vec3 tangent){
	vec3 dir_to_next_point = normal;
	vec3 perp = tangent;
	if (!tangent_facing) {
		perp = normalize(cross(dir_to_cam,dir_to_next_point));
	}
	
	float is_end = 0.5-uv.x;
	is_end = float(abs(is_end) > 0.5) * -sign(is_end);
	vec3 rounder = vec3(0.0); 
	if (rounded) { 
		rounder = is_end * normalize(cross(perp,dir_to_cam));
	}

	float side = sign(float(uv.y > 0.5)-0.5);
	vertex += ((perp*side)-rounder) * width;
	
	tangent = perp;
	normal = cross(perp,dir_to_next_point);
	
	return is_end;
}

varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	is_end = line_process(line_width,VERTEX,normalize(VERTEX),UV2,NORMAL,TANGENT);
	
	BINORMAL = cross(TANGENT,NORMAL);
	if (rounded) {
		float uv_correct = is_end*line_width;
		UV.x += uv_correct;
		UV2.x += uv_correct;
	}
}

float getDistToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return length(c);
}

float getDistSquaredToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return dot(c,c);
}

vec2 getLineTubeNormal(vec2 uv) {
	vec2 n = vec2(0.5);
		n.x = uv.y;
		if (rounded) {
			n.y = is_end*0.5+0.5;
		}
	return n;
}

uniform vec4 color : hint_color = vec4(vec3(1.0),1.0);
uniform float metallic  : hint_range(0.0,1.0,0.005) = 0.0;
uniform float specular  : hint_range(0.0,1.0,0.005) = 0.5;
uniform float roughness : hint_range(0.0,1.0,0.005) = 0.5;
void fragment() {
	if (!FRONT_FACING) { NORMAL = -NORMAL; }
	
	if (!tangent_facing) { NORMALMAP.xy = getLineTubeNormal(UV2); }
	
	
	if (rounded) {
		if (abs(is_end) > 0.0) {
			ALPHA *= smoothstep(1.0,0.95,getDistSquaredToLineCenter(UV)*4.0);
		}
	}
	
	ALBEDO = color.rgb;
	SPECULAR = specular;
	ROUGHNESS = roughness;
	METALLIC = metallic;
	
	ALPHA_SCISSOR = 0.001; // uncomment for alpha blending
}"

[sub_resource type="ShaderMaterial" id=41]
shader = SubResource( 40 )
shader_param/line_width = 0.054
shader_param/tangent_facing = false
shader_param/rounded = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/metallic = 0.0
shader_param/specular = 0.5
shader_param/roughness = 0.5

[sub_resource type="Curve3D" id=42]
bake_interval = 0.01
_data = {
"points": PoolVector3Array( -0.072227, 0.0471233, -0.778171, 0, 0, 0, -6.01298, 1.06462, -0.69593, 0, 0, 0, -0.133498, -0.362062, -0.450268, -4.21014, 1.16929, -0.741142 ),
"tilts": PoolRealArray( 0, 0 )
}

[sub_resource type="ShaderMaterial" id=43]
shader = ExtResource( 9 )
shader_param/line_width = 0.063
shader_param/twirl_aspect = 0.5
shader_param/angle = 0.0
shader_param/repeat_size = 0.3
shader_param/rot_angle = 0.0
shader_param/rot_period = 0.671
shader_param/roughness = 0.5
shader_param/color = Color( 0.1, 0.1, 0.1, 1 )

[sub_resource type="Shader" id=44]
code = "shader_type spatial;
render_mode cull_disabled;

varying mat3 TBN;
varying vec3 eye_origin;
varying vec3 eye_dir;
void vertex(){
	eye_origin = (inverse(WORLD_MATRIX) * vec4(CAMERA_MATRIX[3].xyz,1.0)).xyz;
	eye_dir = VERTEX - eye_origin;
	TBN = mat3(MODELVIEW_MATRIX);
}

mat3 rotation3dX(float angle) {
	float s = sin(angle);
	float c = cos(angle);

	return mat3(
		vec3(1.0, 0.0, 0.0),
		vec3(0.0, c, s),
		vec3(0.0, -s, c)
	);
}

float sdCylinder( vec3 p, float c ){
	return length(p.yz)-c;
}

float scene(vec3 p){
	p = p*rotation3dX(p.x*3.1415);
	float o1 = sdCylinder(p - vec3(0.0,-0.2,0.0),0.2);
	float o2 = sdCylinder(p - vec3(0.0,0.1,0.2),0.2);
	float o3 = sdCylinder(p - vec3(0.0,0.1,-0.2),0.2);
	
	float rope = min(o1,min(o2,o3));
	
	return rope;
}

vec3 getNormal( in vec3 p )
{
    const float h = 0.0001;
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*scene( p + k.xyy*h ) + 
                      k.yyx*scene( p + k.yyx*h ) + 
                      k.yxy*scene( p + k.yxy*h ) + 
                      k.xxx*scene( p + k.xxx*h ) );
}

float raymarch(vec3 ro, vec3 rd){
	float total_dist = 0.0;
	
	for(int i=0;i<100;i++){
		// culling below 3.0 is excessive
		// and even more visible at grazing angles
//		if (total_dist > 30.0) { break; }
		
		vec3 ray = ro + (rd * total_dist);
		
		float dist = scene(ray);
		
		if (dist < 0.005){
			return total_dist;
		}
		
		total_dist += dist;
	}
	
	return -1.0;
}

vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
	p3 += dot(p3, p3.yzx+33.33);
	return fract((p3.xx+p3.yz)*p3.zy);
}
float ao(vec3 p, vec3 n, vec2 fragcoord)
{
	vec3 t = normalize(cross(n,vec3(0.0,1.0,0.0)));
	vec3 b = normalize(cross(t,n));
	
	float inv_t = 1.0/10.0;
	
	float occ = 0.0;
	for (int i=0;i<10;i++)
	{
		vec2  aa = ( hash22(fragcoord+TIME*float(i+1)) );
		float ra = sqrt(aa.y);
		float rx = ra*cos(6.2831*aa.x); 
		float ry = ra*sin(6.2831*aa.x);
		float rz = sqrt( 1.0-aa.y );
		vec3  dir = vec3( rx*t + ry*b + rz*n );
		vec3 no;
		float hit = raymarch(p+dir*0.1,dir);
		if (hit < 0.0)
			occ += inv_t;
	}
	
	return occ;
}

uniform vec4 color : hint_color = vec4(vec3(1.0,1.0,0.5),1.0);
uniform float twirl_aspect = 0.5;

void fragment(){
	// We can't do raycasts with objects
	// that intersect Z =< 0.0 in tangent-space; it gets clipped.
	// So the rope is actually below the line surface.
	vec3 ro = eye_origin.zyx*10.0;
	vec3 rd = eye_dir.zyx;
	
	
	float hit = raymarch(ro, rd);
	if (hit < 0.0) { discard; }
	
	vec3 hit_pos = ro + rd * hit;
	vec3 hit_normal = TBN * getNormal(hit_pos);
	NORMAL = hit_normal;
	
	float ao = ao(hit_pos, hit_normal, FRAGCOORD.xy);
	ALBEDO = color.rgb * ao;
	ROUGHNESS = 0.5;
}"

[sub_resource type="ShaderMaterial" id=45]
shader = SubResource( 44 )
shader_param/color = Color( 1, 1, 0.5, 1 )
shader_param/twirl_aspect = 0.5

[sub_resource type="PrismMesh" id=46]
material = SubResource( 45 )
size = Vector3( 0.1, 0.1, 1.938 )

[node name="Spatial" type="Spatial"]

[node name="wormspinner" type="Spatial" parent="."]
transform = Transform( 0.850304, 0, -0.526269, 0, 0.999999, 0, 0.526264, 0, 0.850313, 0.392798, 0.016, 3.531 )
script = SubResource( 1 )
mul = 1.59

[node name="worm" type="Spatial" parent="wormspinner"]
transform = Transform( 1.42087e-08, 0.325059, -0.945694, 1, -4.37114e-08, -4.41775e-14, -4.13376e-08, -0.945694, -0.325059, 0.611, 0.05, 0.17 )
script = ExtResource( 4 )
max_points = 95
material = SubResource( 31 )

[node name="MeshInstance2" type="MeshInstance" parent="wormspinner/worm"]
transform = Transform( 0.05, 4.44089e-16, -1.11022e-16, 0, 0.05, 0, -2.35922e-16, -1.39698e-09, 0.05, 0.0469999, 0, 0.033 )
mesh = SubResource( 36 )

[node name="MeshInstance3" type="MeshInstance" parent="wormspinner/worm"]
transform = Transform( 0.05, 0, 0, 0, 0.05, 0, 0, 0, 0.05, 0.047, 0, -0.026 )
mesh = SubResource( 36 )

[node name="wire" type="Path" parent="."]
transform = Transform( -0.422618, 0, 0.906308, 0, 1, 0, -0.906308, 0, -0.422618, 1.01146, -0.000974536, 3.21569 )
curve = SubResource( 6 )
script = ExtResource( 3 )
material = SubResource( 7 )

[node name="wireframe" type="Path" parent="."]
transform = Transform( 0.991497, 0, 0.130128, 0, 1, 0, -0.130128, 0, 0.991497, -0.638963, 0.205764, 3.83932 )
curve = SubResource( 8 )
script = ExtResource( 3 )
render_mode = 1
material = SubResource( 9 )

[node name="rope" type="Path" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.1, 0.2, -0.1 )
curve = SubResource( 10 )
script = ExtResource( 3 )
material = SubResource( 11 )

[node name="glow" type="Path" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -8.10647, 0.547944, 0.487238 )
curve = SubResource( 32 )
script = ExtResource( 3 )
material = SubResource( 33 )

[node name="Spatial" type="Spatial" parent="."]
transform = Transform( -2.18557e-08, 0, -0.5, 0, 0.5, 0, 0.5, 0, -2.18557e-08, 1.39, 0.857196, 4.73432 )

[node name="Path3" type="Path" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0142488, 0.272145, -0.678472 )
curve = SubResource( 12 )
script = ExtResource( 3 )
material = SubResource( 13 )

[node name="Path4" type="Path" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0111256, 0.274852, 0.128072 )
curve = SubResource( 14 )
script = ExtResource( 3 )
material = SubResource( 13 )

[node name="Path5" type="Path" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0111256, 0.274852, 0.624882 )
curve = SubResource( 15 )
script = ExtResource( 3 )
material = SubResource( 13 )

[node name="Path6" type="Path" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0111256, 0.274852, 1.86555 )
curve = SubResource( 16 )
script = ExtResource( 3 )
material = SubResource( 13 )

[node name="Path7" type="Path" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.00908566, -1.25051, -0.907288 )
curve = SubResource( 17 )
script = ExtResource( 3 )
material = SubResource( 13 )

[node name="Path8" type="Path" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.00962734, -1.24589, 0.182642 )
curve = SubResource( 18 )
script = ExtResource( 3 )
material = SubResource( 13 )

[node name="2" type="OmniLight" parent="Spatial"]
transform = Transform( -0.0435531, 0.28273, 1.97944, -0.598798, 1.88719, -0.28273, -1.90776, -0.598798, 0.0435526, 0.31318, 0.431668, -0.42398 )
light_color = Color( 1, 0.94, 1, 1 )
light_energy = 2.0
shadow_enabled = true
shadow_bias = 0.05
omni_range = 20.0
omni_attenuation = 2.0
omni_shadow_mode = 0

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -1, 8.74228e-08, 0, -8.74228e-08, -1, -0.389846, 2.016, -0.151969 )
mesh = SubResource( 19 )
material/0 = SubResource( 22 )

[node name="MeshInstance3" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -0.104476, 0.491065, 5.4924 )
mesh = SubResource( 19 )
material/0 = SubResource( 22 )

[node name="MeshInstance4" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.023256, -0.016975, 0.0210711 )
mesh = SubResource( 19 )
material/0 = SubResource( 22 )

[node name="CPUParticles" type="CPUParticles" parent="."]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 1.14351, 1.42591, 1.30462 )
visible = false
cast_shadow = 0
amount = 64
lifetime = 4.0
mesh = SubResource( 27 )
emission_shape = 2
emission_box_extents = Vector3( 0.1, 0.1, 3 )
spread = 180.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 0.1

[node name="Camera" type="Camera" parent="."]
transform = Transform( -0.932721, 0, 0.360599, 0, 1, 0, -0.360599, 0, -0.932721, 0.808431, 0.807191, -0.232107 )
visible = false

[node name="MeshInstance5" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 2.42868, 0.805756, 2.64459 )
visible = false
mesh = SubResource( 28 )
material/0 = SubResource( 30 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource( 1 )

[node name="Trail3D" type="Spatial" parent="."]
transform = Transform( 0.0465687, -0.818761, -0.572242, -0.986043, 0.0539839, -0.157484, 0.159833, 0.57159, -0.804821, -0.545116, 1.10295, 1.43626 )
script = ExtResource( 4 )
material = SubResource( 39 )

[node name="Trail3D2" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.55701, 3.18345 )
script = ExtResource( 4 )
damping = 0.738
material = SubResource( 41 )

[node name="LinePath3D" type="Path" parent="."]
transform = Transform( 0.998648, 0.0519874, 0, -0.0519874, 0.998648, 0, 0, 0, 1, 7.01298, -0.0646176, 3.69593 )
curve = SubResource( 42 )
script = ExtResource( 3 )
material = SubResource( 43 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 0.661299, 0.127601, -0.73919, 0, 0.985426, 0.170106, 0.750123, -0.112491, 0.651661, 0.678746, 1.60611, 1.46029 )
mesh = SubResource( 46 )
